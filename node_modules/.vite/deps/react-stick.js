import {
  require_react_dom
} from "./chunk-KXIZOLV7.js";
import {
  __commonJS,
  __toESM,
  require_react
} from "./chunk-5VZC3UST.js";

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React = require_react();
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values3, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config, self) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key, ref, self, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type, config, maybeKey, source, self) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            if (hasValidRef(config)) {
              ref = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self);
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys3 = Object.keys(fragment.props);
            for (var i = 0; i < keys3.length; i++) {
              var key = keys3[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key, source, self);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx = jsxWithValidationDynamic;
        var jsxs = jsxWithValidationStatic;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.jsx = jsx;
        exports.jsxs = jsxs;
      })();
    }
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_jsx_runtime_development();
    }
  }
});

// node_modules/requestidlecallback/index.js
var require_requestidlecallback = __commonJS({
  "node_modules/requestidlecallback/index.js"(exports, module) {
    (function(factory) {
      if (typeof define === "function" && define.amd) {
        define([], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory();
      } else {
        window.idleCallbackShim = factory();
      }
    })(function() {
      "use strict";
      var scheduleStart, throttleDelay, lazytimer, lazyraf;
      var root = typeof window != "undefined" ? window : typeof global != void 0 ? global : this || {};
      var requestAnimationFrame2 = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;
      var cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;
      var tasks = [];
      var runAttempts = 0;
      var isRunning = false;
      var remainingTime = 7;
      var minThrottle = 35;
      var throttle = 125;
      var index = 0;
      var taskStart = 0;
      var tasklength = 0;
      var IdleDeadline = {
        get didTimeout() {
          return false;
        },
        timeRemaining: function() {
          var timeRemaining = remainingTime - (Date.now() - taskStart);
          return timeRemaining < 0 ? 0 : timeRemaining;
        }
      };
      var setInactive = debounce(function() {
        remainingTime = 22;
        throttle = 66;
        minThrottle = 0;
      });
      function debounce(fn) {
        var id, timestamp;
        var wait = 99;
        var check = function() {
          var last = Date.now() - timestamp;
          if (last < wait) {
            id = setTimeout(check, wait - last);
          } else {
            id = null;
            fn();
          }
        };
        return function() {
          timestamp = Date.now();
          if (!id) {
            id = setTimeout(check, wait);
          }
        };
      }
      function abortRunning() {
        if (isRunning) {
          if (lazyraf) {
            cancelRequestAnimationFrame(lazyraf);
          }
          if (lazytimer) {
            clearTimeout(lazytimer);
          }
          isRunning = false;
        }
      }
      function onInputorMutation() {
        if (throttle != 125) {
          remainingTime = 7;
          throttle = 125;
          minThrottle = 35;
          if (isRunning) {
            abortRunning();
            scheduleLazy();
          }
        }
        setInactive();
      }
      function scheduleAfterRaf() {
        lazyraf = null;
        lazytimer = setTimeout(runTasks, 0);
      }
      function scheduleRaf() {
        lazytimer = null;
        requestAnimationFrame2(scheduleAfterRaf);
      }
      function scheduleLazy() {
        if (isRunning) {
          return;
        }
        throttleDelay = throttle - (Date.now() - taskStart);
        scheduleStart = Date.now();
        isRunning = true;
        if (minThrottle && throttleDelay < minThrottle) {
          throttleDelay = minThrottle;
        }
        if (throttleDelay > 9) {
          lazytimer = setTimeout(scheduleRaf, throttleDelay);
        } else {
          throttleDelay = 0;
          scheduleRaf();
        }
      }
      function runTasks() {
        var task, i, len;
        var timeThreshold = remainingTime > 9 ? 9 : 1;
        taskStart = Date.now();
        isRunning = false;
        lazytimer = null;
        if (runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart) {
          for (i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++) {
            task = tasks.shift();
            tasklength++;
            if (task) {
              task(IdleDeadline);
            }
          }
        }
        if (tasks.length) {
          scheduleLazy();
        } else {
          runAttempts = 0;
        }
      }
      function requestIdleCallbackShim(task) {
        index++;
        tasks.push(task);
        scheduleLazy();
        return index;
      }
      function cancelIdleCallbackShim(id) {
        var index2 = id - 1 - tasklength;
        if (tasks[index2]) {
          tasks[index2] = null;
        }
      }
      if (!root.requestIdleCallback || !root.cancelIdleCallback) {
        root.requestIdleCallback = requestIdleCallbackShim;
        root.cancelIdleCallback = cancelIdleCallbackShim;
        if (root.document && document.addEventListener) {
          root.addEventListener("scroll", onInputorMutation, true);
          root.addEventListener("resize", onInputorMutation);
          document.addEventListener("focus", onInputorMutation, true);
          document.addEventListener("mouseover", onInputorMutation, true);
          ["click", "keypress", "touchstart", "mousedown"].forEach(function(name) {
            document.addEventListener(name, onInputorMutation, { capture: true, passive: true });
          });
          if (root.MutationObserver) {
            new MutationObserver(onInputorMutation).observe(document.documentElement, { childList: true, subtree: true, attributes: true });
          }
        }
      } else {
        try {
          root.requestIdleCallback(function() {
          }, { timeout: 0 });
        } catch (e) {
          (function(rIC) {
            var timeRemainingProto, timeRemaining;
            root.requestIdleCallback = function(fn, timeout) {
              if (timeout && typeof timeout.timeout == "number") {
                return rIC(fn, timeout.timeout);
              }
              return rIC(fn);
            };
            if (root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)) {
              timeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, "timeRemaining");
              if (!timeRemaining || !timeRemaining.configurable || !timeRemaining.get) {
                return;
              }
              Object.defineProperty(timeRemainingProto, "timeRemaining", {
                value: function() {
                  return timeRemaining.get.call(this);
                },
                enumerable: true,
                configurable: true
              });
            }
          })(root.requestIdleCallback);
        }
      }
      return {
        request: requestIdleCallbackShim,
        cancel: cancelIdleCallbackShim
      };
    });
  }
});

// node_modules/invariant/browser.js
var require_browser = __commonJS({
  "node_modules/invariant/browser.js"(exports, module) {
    "use strict";
    var invariant5 = function(condition, format, a, b, c, d, e, f) {
      if (true) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module.exports = invariant5;
  }
});

// node_modules/react-stick/es/Stick.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var import_requestidlecallback2 = __toESM(require_requestidlecallback());
var import_invariant4 = __toESM(require_browser());
var import_react8 = __toESM(require_react());

// node_modules/substyle/es6/PropsDecoratorProvider.js
var import_react = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}

// node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}

// node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}

// node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

// node_modules/substyle/es6/utils.js
var keys = function keys2(obj) {
  return obj === Object(obj) ? Object.keys(obj) : [];
};
var values = function values2(obj) {
  return obj === Object(obj) ? Object.values(obj) : [];
};
function mergeDeep(target, source) {
  var output = Object.assign({}, target);
  if (isPlainObject(target) && isPlainObject(source)) {
    keys(source).forEach(function(key) {
      if (isPlainObject(source[key])) {
        if (!(key in target))
          Object.assign(output, _defineProperty({}, key, source[key]));
        else
          output[key] = mergeDeep(target[key], source[key]);
      } else {
        Object.assign(output, _defineProperty({}, key, source[key]));
      }
    });
  }
  return output;
}
var merge = function merge2(target) {
  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    sources[_key - 1] = arguments[_key];
  }
  return sources.reduce(function(t, s) {
    return mergeDeep(t, s);
  }, target);
};
var omit = function omit2(obj, keys3) {
  var other = Object.assign({}, obj);
  if (keys3) {
    for (var i = 0; i < keys3.length; i++) {
      delete other[keys3[i]];
    }
  }
  return other;
};
var isPlainObject = function isPlainObject2(obj) {
  return obj === Object(obj) && !(obj instanceof Date) && !Array.isArray(obj);
};
var compact = function compact2(arr) {
  return (arr || []).filter(Boolean);
};

// node_modules/substyle/es6/filterKeys.js
var isModifier = function isModifier2(key) {
  return key[0] === "&";
};
var isElement = function isElement2(key) {
  return !isModifier(key);
};

// node_modules/substyle/es6/pickStyles.js
var camelize = function camelize2(key) {
  return key.replace(/-(\w)/g, function(m, c) {
    return c.toUpperCase();
  });
};
var pickDirectStyles = function pickDirectStyles2(style) {
  var objectPropertiesWhitelist = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var styleKeys = keys(style);
  var result = {};
  for (var i = 0, l = styleKeys.length; i < l; i += 1) {
    var key = styleKeys[i];
    var isDirect = Object.prototype.toString.call(style[key]) !== "[object Object]" || // style defs
    key[0] === ":" || // pseudo selectors
    key[0] === "@" || // @media / @keyframes / @supports / @font-face
    objectPropertiesWhitelist.indexOf(key) >= 0;
    if (isDirect) {
      result[key] = style[key];
    }
  }
  return result;
};
var pickNestedStyles = function pickNestedStyles2(style, keysToPick) {
  var camelizedKeysToPick = keysToPick.map(camelize);
  var styleKeys = keys(style);
  var result = {};
  for (var i = 0, l = styleKeys.length; i < l; i += 1) {
    var key = styleKeys[i];
    if (keysToPick.indexOf(key) >= 0 || camelizedKeysToPick.indexOf(camelize(key)) >= 0) {
      result[key] = style[key];
    }
  }
  return result;
};
var hoistModifierStylesRecursive = function hoistModifierStylesRecursive2(style, modifierKeysToPick) {
  var result = merge.apply(void 0, [{}, omit(style, modifierKeysToPick)].concat(_toConsumableArray(values(pickNestedStyles(style, modifierKeysToPick)))));
  var modifierKeys = keys(result).filter(isModifier);
  for (var i = 0, l = modifierKeys.length; i < l; i += 1) {
    var key = modifierKeys[i];
    var subresult = hoistModifierStylesRecursive2(result[key], modifierKeysToPick);
    if (modifierKeysToPick.indexOf(key) >= 0) {
      delete result[key];
      result = merge({}, result, subresult);
    } else {
      result[key] = subresult;
    }
  }
  return result;
};

// node_modules/substyle/es6/defaultPropsDecorator.js
function ownKeys(object, enumerableOnly) {
  var keys3 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var defaultObjectPropsWhitelist = ["animationName"];
var defaultPropsDecorator = function defaultPropsDecorator2(_ref) {
  var style = _ref.style, className = _ref.className;
  return _objectSpread(_objectSpread({}, style ? {
    style: pickDirectStyles(style, defaultObjectPropsWhitelist)
  } : {}), className ? {
    className
  } : {});
};
var defaultPropsDecorator_default = defaultPropsDecorator;

// node_modules/substyle/es6/PropsDecoratorProvider.js
var PropsDecoratorContext = (0, import_react.createContext)(defaultPropsDecorator_default);
var PropsDecoratorProvider_default = PropsDecoratorContext.Provider;

// node_modules/substyle/es6/createSubstyle.js
var import_invariant = __toESM(require_browser());

// node_modules/substyle/es6/coerceSelection.js
var coerceSelection = function coerceSelection2(select) {
  if (!select) {
    return [];
  } else if (typeof select === "string") {
    return [select];
  } else if (!Array.isArray(select)) {
    var objSelect = select;
    return keys(select).reduce(function(acc, key) {
      return acc.concat(objSelect[key] ? [key] : []);
    }, []);
  }
  return select;
};
var coerceSelection_default = coerceSelection;

// node_modules/substyle/es6/memoize.js
var EMPTY = {};
var memoize = function memoize2(substyle) {
  return function(select, defaultStyle3) {
    var cacheKey = defaultStyle3 || EMPTY;
    substyle.memoize = substyle.memoize || /* @__PURE__ */ new WeakMap();
    var mapEntry;
    if (!substyle.memoize.has(cacheKey)) {
      mapEntry = {};
      substyle.memoize.set(cacheKey, mapEntry);
    } else {
      mapEntry = substyle.memoize.get(cacheKey);
    }
    var selectHash = coerceSelection_default(select).join(" ");
    return selectHash in mapEntry ? mapEntry[selectHash] : mapEntry[selectHash] = substyle(select || [], defaultStyle3);
  };
};
var memoize_default = memoize;

// node_modules/substyle/es6/createSubstyle.js
function ownKeys2(object, enumerableOnly) {
  var keys3 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var guessBaseClassName = function guessBaseClassName2(classNames) {
  var firstKey = classNames && keys(classNames)[0];
  return firstKey && firstKey.split("__")[0].split("--")[0];
};
var deriveClassNames = function deriveClassNames2(className, elementKeys, modifierKeys) {
  if (!className) {
    return void 0;
  }
  var firstClassName = className.split(" ")[0];
  var derivedClassNames = [].concat(_toConsumableArray(elementKeys.length === 0 ? modifierKeys.map(function(key) {
    return "".concat(firstClassName, "--").concat(key.substring(1));
  }) : []), _toConsumableArray(elementKeys.map(function(key) {
    return "".concat(firstClassName, "__").concat(key);
  })));
  return elementKeys.length === 0 ? [className].concat(_toConsumableArray(derivedClassNames)) : derivedClassNames;
};
function createSubstyle(_ref) {
  var style = _ref.style, className = _ref.className, classNames = _ref.classNames;
  var propsDecorator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultPropsDecorator_default;
  var baseClassName = className || guessBaseClassName(classNames) || (style === null || style === void 0 ? void 0 : style.className);
  var substyle = typeof style === "function" ? style : memoize_default(function(select, defaultStyle3) {
    var selectedKeys = coerceSelection_default(select);
    (0, import_invariant.default)(Array.isArray(selectedKeys), "First parameter must be a string, an array of strings, a plain object with boolean values, or a falsy value.");
    (0, import_invariant.default)(!defaultStyle3 || isPlainObject(defaultStyle3), "Optional second parameter must be a plain object.");
    var modifierKeys = selectedKeys.filter(isModifier);
    var elementKeys = selectedKeys.filter(isElement);
    var collectElementStyles = elementKeys.length > 0 ? function(fromStyle) {
      return values(pickNestedStyles(fromStyle, elementKeys));
    } : function(fromStyle) {
      return [fromStyle];
    };
    var collectSelectedStyles = function collectSelectedStyles2() {
      var fromStyle = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      return collectElementStyles(hoistModifierStylesRecursive(fromStyle, modifierKeys));
    };
    var derivedClassNames = deriveClassNames(baseClassName, elementKeys, modifierKeys);
    return createSubstyle(_objectSpread2(_objectSpread2(_objectSpread2({}, (style || defaultStyle3) && {
      style: merge.apply(void 0, [{}].concat(_toConsumableArray(collectSelectedStyles(defaultStyle3)), _toConsumableArray(collectSelectedStyles(style))))
    }), derivedClassNames && {
      className: derivedClassNames.join(" ")
    }), classNames && {
      classNames
    }), propsDecorator);
  });
  var styleProps = _objectSpread2({}, typeof style === "function" ? style : {
    style
  });
  var classNameSplit = _toConsumableArray(new Set([].concat(_toConsumableArray(styleProps.className ? styleProps.className.split(" ") : []), _toConsumableArray(baseClassName ? baseClassName.split(" ") : []))));
  var mappedClassNames = classNames ? compact(classNameSplit.map(function(singleClassName) {
    return classNames[singleClassName];
  })) : classNameSplit;
  var propsForSpread = propsDecorator(_objectSpread2(_objectSpread2({}, styleProps), mappedClassNames.length > 0 ? {
    className: mappedClassNames.join(" ")
  } : {}));
  Object.assign(substyle, propsForSpread);
  return substyle;
}
var createSubstyle_default = createSubstyle;

// node_modules/substyle/es6/inline.js
function ownKeys3(object, enumerableOnly) {
  var keys3 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys3.push.apply(keys3, symbols);
  }
  return keys3;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys3(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var inline = function inline2() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return args.reduce(function(result, arg) {
    return _objectSpread3(_objectSpread3(_objectSpread3({}, result), typeof arg === "function" ? arg : {}), {}, {
      style: _objectSpread3(_objectSpread3({}, result.style), typeof arg === "function" ? arg.style : arg)
    });
  }, {});
};
var inline_default = inline;

// node_modules/substyle/es6/useStyles.js
var import_react2 = __toESM(require_react());
var useStyles = function useStyles2(defaultStyle3, _ref, modifiers) {
  var style = _ref.style, className = _ref.className, classNames = _ref.classNames;
  var propsDecorator = (0, import_react2.useContext)(PropsDecoratorContext);
  var substyle = (0, import_react2.useMemo)(function() {
    return createSubstyle_default({
      style,
      className,
      classNames
    }, propsDecorator);
  }, [style, className, classNames, propsDecorator]);
  return substyle(modifiers, defaultStyle3);
};
var useStyles_default = useStyles;

// node_modules/substyle/es6/index.js
var es6_default = useStyles_default;

// node_modules/react-stick/es/StickContext.js
var import_react3 = __toESM(require_react());
var StickContext = (0, import_react3.createContext)(null);

// node_modules/react-stick/es/StickInline.js
var import_jsx_runtime = __toESM(require_jsx_runtime());

// node_modules/react-stick/es/utils/scroll.js
function scrollX(node) {
  if (!node) {
    return 0;
  }
  if (!(node instanceof HTMLElement)) {
    return 0;
  }
  return node.scrollLeft + scrollX(node.parentNode);
}
function scrollY() {
  if (typeof window !== "undefined") {
    return typeof window.scrollY === "number" ? window.scrollY : window.pageYOffset;
  }
  return 0;
}

// node_modules/react-stick/es/utils/fit.js
var isPositionedToTop = (position) => {
  const [positionMarker] = position.split(" ");
  return positionMarker === "top";
};
var isPositionedToBottom = (position) => {
  const [positionMarker] = position.split(" ");
  return positionMarker === "bottom";
};
var isPositionedToRight = (position) => {
  const positionMarker = position.split(" ")[1];
  return positionMarker === "right";
};
var isPositionedToLeft = (position) => {
  const positionMarker = position.split(" ")[1];
  return positionMarker === "left";
};
var fitsOnRight = (nodeRef, anchorRef) => {
  const { width: nodeWidth } = nodeRef.getBoundingClientRect();
  const { right: anchorRight } = anchorRef.getBoundingClientRect();
  return anchorRight + nodeWidth <= window.innerWidth;
};
var fitsOnLeft = (nodeRef, anchorRef) => {
  const { width: nodeWidth } = nodeRef.getBoundingClientRect();
  const { left: anchorLeft } = anchorRef.getBoundingClientRect();
  return anchorLeft - nodeWidth >= 0;
};
var fitsOnTop = (nodeRef, anchorRef) => {
  const { height: nodeHeight } = nodeRef.getBoundingClientRect();
  const { top: anchorTop } = anchorRef.getBoundingClientRect();
  return anchorTop - nodeHeight >= 0;
};
var fitsOnBottom = (nodeRef, anchorRef) => {
  const { height: nodeHeight } = nodeRef.getBoundingClientRect();
  const { bottom: anchorBottom } = anchorRef.getBoundingClientRect();
  return anchorBottom + nodeHeight <= window.innerHeight;
};

// node_modules/react-stick/es/utils/getDefaultAlign.js
var defaultAligns = {
  "top left": "bottom left",
  "top center": "bottom center",
  "top right": "bottom right",
  "middle left": "middle right",
  "middle center": "middle center",
  "middle right": "middle left",
  "bottom left": "top left",
  "bottom center": "top center",
  "bottom right": "top right"
};
var getDefaultAlign = (position) => defaultAligns[position];
var getDefaultAlign_default = getDefaultAlign;

// node_modules/react-stick/es/defaultPosition.js
var DEFAULT_POSITION = "bottom left";
var defaultPosition_default = DEFAULT_POSITION;
var positions = [
  "bottom left",
  "bottom center",
  "bottom right",
  "middle left",
  "middle center",
  "middle right",
  "top left",
  "top center",
  "top right"
];

// node_modules/react-stick/es/utils/getModifiers.js
var getModifiers = ({ align, position, sameWidth }) => {
  const finalPosition = position || defaultPosition_default;
  const [verticalPosition, horizontalPosition] = finalPosition.split(" ");
  const [verticalAlign, horizontalAlign] = (align || getDefaultAlign_default(finalPosition)).split(" ");
  return {
    [`&position-${horizontalPosition}`]: true,
    [`&position-${verticalPosition}`]: true,
    [`&align-${horizontalAlign}`]: true,
    [`&align-${verticalAlign}`]: true,
    "&sameWidth": !!sameWidth
  };
};
var getModifiers_default = getModifiers;

// node_modules/react-stick/es/utils/uniqueId.js
var counter = 1;
function uniqueId() {
  return counter++;
}
var uniqueId_default = uniqueId;

// node_modules/react-stick/es/StickInline.js
function StickInline({ node, children, component, containerRef, nestingKey, align, position, style, ...rest }) {
  const styles = es6_default(defaultStyle, { style }, getModifiers_default({ align, position }));
  const Component = component || "div";
  return (0, import_jsx_runtime.jsxs)(Component, { ...rest, ...styles, ref: containerRef, "data-sticknestingkey": nestingKey, children: [children, node && (0, import_jsx_runtime.jsx)("div", { ...styles("node"), children: node })] });
}
var defaultStyle = {
  position: "relative",
  node: {
    position: "absolute",
    zIndex: 99,
    textAlign: "left"
  },
  "&position-top": {
    node: {
      top: 0
    }
  },
  "&position-middle": {
    node: {
      top: "50%"
    }
  },
  "&position-bottom": {
    node: {
      top: "100%"
    }
  },
  "&position-left": {
    node: {
      left: 0
    }
  },
  "&position-center": {
    node: {
      left: "50%"
    }
  },
  "&position-right": {
    node: {
      left: "100%"
    }
  }
};
var StickInline_default = StickInline;

// node_modules/react-stick/es/StickNode.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react4 = __toESM(require_react());
var StickNode = (0, import_react4.forwardRef)(function({ children, width, align, position, sameWidth }, ref) {
  const styles = es6_default(defaultStyle2, {}, getModifiers_default({ align, position, sameWidth }));
  return (0, import_jsx_runtime2.jsx)("div", { ...inline_default(styles, { width }), children: (0, import_jsx_runtime2.jsx)("div", { ...styles("content"), ref, children }) });
});
var defaultStyle2 = {
  position: "absolute",
  right: 0,
  bottom: 0,
  content: {
    // absolute position is needed as the stick node would otherwise
    // cover up the base node and, for instance, make it impossible to
    // click buttons
    position: "absolute",
    display: "inline-block",
    left: "inherit",
    right: "inherit",
    top: "inherit",
    bottom: "inherit"
  },
  "&sameWidth": {
    content: {
      display: "block",
      width: "100%"
    }
  },
  "&align-left": {
    right: "auto",
    left: 0
  },
  "&align-top": {
    bottom: "auto",
    top: 0
  },
  "&align-middle": {
    content: {
      transform: "translate(0, 50%)"
    }
  },
  "&align-center": {
    content: {
      transform: "translate(50%, 0)"
    },
    "&align-middle": {
      content: {
        transform: "translate(50%, 50%)"
      }
    }
  }
};
var StickNode_default = StickNode;

// node_modules/react-stick/es/StickPortal.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_requestidlecallback = __toESM(require_requestidlecallback());
var import_invariant3 = __toESM(require_browser());
var import_react7 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/react-stick/es/hooks/useAutoFlip.js
var import_invariant2 = __toESM(require_browser());
var import_react5 = __toESM(require_react());
var useAutoFlip = (enableAutoHorizontalFlip, enableAutoVerticalFlip, initialPosition, initialAlign) => {
  const [currentPosition, setCurrentPosition] = (0, import_react5.useState)(initialPosition);
  const [currentAlign, setCurrentAlign] = (0, import_react5.useState)(initialAlign || getDefaultAlign_default(initialPosition));
  (0, import_react5.useEffect)(() => {
    setCurrentPosition(initialPosition);
    setCurrentAlign(initialAlign || getDefaultAlign_default(initialPosition));
  }, [initialAlign, initialPosition]);
  const checkAlignment = (0, import_react5.useCallback)((nodeRef, anchorRef) => {
    const [horizontalPosition, horizontalAlign] = autoFlipHorizontally(nodeRef, anchorRef, {
      enabled: enableAutoHorizontalFlip,
      initialPosition,
      initialAlign,
      currentPosition,
      currentAlign
    });
    const [verticalPosition, verticalAlign] = autoFlipVertically(nodeRef, anchorRef, {
      enabled: enableAutoVerticalFlip,
      initialPosition,
      initialAlign,
      currentPosition: horizontalPosition,
      currentAlign: horizontalAlign
    });
    if (verticalPosition !== currentPosition) {
      setCurrentPosition(verticalPosition);
    }
    if (verticalAlign !== currentAlign) {
      setCurrentAlign(verticalAlign);
    }
  }, [
    currentAlign,
    currentPosition,
    enableAutoHorizontalFlip,
    enableAutoVerticalFlip,
    initialAlign,
    initialPosition
  ]);
  return [currentPosition, currentAlign, checkAlignment];
};
var useAutoFlip_default = useAutoFlip;
var autoFlipVertically = (nodeRef, anchorRef, { enabled, initialPosition, currentPosition, initialAlign, currentAlign }) => {
  if (!enabled) {
    return [currentPosition, currentAlign];
  }
  const positionedToBottom = isPositionedToBottom(currentPosition);
  const positionedToTop = isPositionedToTop(currentPosition);
  if (isPositionedToBottom(initialPosition)) {
    if (fitsOnBottom(nodeRef, anchorRef)) {
      if (!positionedToBottom) {
        return [switchToBottom(currentPosition), switchToTop(currentAlign)];
      }
    } else if (fitsOnTop(nodeRef, anchorRef) && !positionedToTop) {
      return [switchToTop(currentPosition), switchToBottom(currentAlign)];
    }
  }
  if (isPositionedToTop(initialPosition)) {
    if (fitsOnTop(nodeRef, anchorRef)) {
      if (!positionedToTop) {
        return [switchToTop(currentPosition), switchToBottom(currentAlign)];
      }
    } else if (fitsOnBottom(nodeRef, anchorRef) && !positionedToBottom) {
      return [switchToBottom(currentPosition), switchToTop(currentAlign)];
    }
  }
  return [currentPosition, currentAlign];
};
var autoFlipHorizontally = (nodeRef, anchorRef, { enabled, initialPosition, currentPosition, initialAlign, currentAlign }) => {
  if (!enabled) {
    return [currentPosition, currentAlign];
  }
  const positionedToLeft = isPositionedToLeft(currentPosition);
  const positionedToRight = isPositionedToRight(currentPosition);
  if (isPositionedToRight(initialPosition)) {
    if (fitsOnRight(nodeRef, anchorRef)) {
      if (!positionedToRight) {
        return [switchToRight(currentPosition), switchToLeft(currentAlign)];
      }
    } else if (fitsOnLeft(nodeRef, anchorRef) && !positionedToLeft) {
      return [switchToLeft(currentPosition), switchToRight(currentAlign)];
    }
  }
  if (isPositionedToLeft(initialPosition)) {
    if (fitsOnLeft(nodeRef, anchorRef)) {
      if (!positionedToLeft) {
        return [switchToLeft(currentPosition), switchToRight(currentAlign)];
      }
    } else if (fitsOnRight(nodeRef, anchorRef) && !positionedToRight) {
      return [switchToRight(currentPosition), switchToLeft(currentAlign)];
    }
  }
  return [currentPosition, currentAlign];
};
var switchVerticalPosition = (position, target) => {
  const newPosition = positions.find((standardPosition) => standardPosition === `${target} ${position.split(" ")[1]}`);
  (0, import_invariant2.default)(newPosition, `Could not determine new position. Old position "${position}", new vertical target "${target}"`);
  return newPosition;
};
var switchHorizontalPosition = (position, target) => {
  const newPosition = positions.find((standardPosition) => standardPosition === `${position.split(" ")[0]} ${target}`);
  (0, import_invariant2.default)(newPosition, `Could not determine new position. Old position "${position}", new horizontal target "${target}"`);
  return newPosition;
};
var switchToBottom = (position) => switchVerticalPosition(position, "bottom");
var switchToTop = (position) => switchVerticalPosition(position, "top");
var switchToLeft = (position) => switchHorizontalPosition(position, "left");
var switchToRight = (position) => switchHorizontalPosition(position, "right");

// node_modules/react-stick/es/hooks/useWatcher.js
var import_react6 = __toESM(require_react());
function useWatcher(watcher, { updateOnAnimationFrame, enabled }) {
  (0, import_react6.useEffect)(() => {
    let animationFrameId;
    let idleCallbackId;
    if (enabled && typeof window.requestAnimationFrame !== "undefined") {
      const callback = () => {
        watcher();
        if (updateOnAnimationFrame) {
          animationFrameId = requestAnimationFrame(callback);
        } else {
          idleCallbackId = requestIdleCallback(callback);
        }
      };
      callback();
    }
    return () => {
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
      }
      if (idleCallbackId) {
        cancelIdleCallback(idleCallbackId);
      }
    };
  }, [updateOnAnimationFrame, watcher, enabled]);
}
var useWatcher_default = useWatcher;

// node_modules/react-stick/es/StickPortal.js
var StickPortal = (0, import_react7.forwardRef)(function({ children, component, style, transportTo, nestingKey, node, position, containerRef, updateOnAnimationFrame, onReposition, ...rest }, ref) {
  const nodeRef = (0, import_react7.useRef)();
  const [top, setTop] = (0, import_react7.useState)(null);
  const [left, setLeft] = (0, import_react7.useState)(null);
  const [visible, setVisible] = (0, import_react7.useState)(!!node);
  const [host, hostParent] = useHost(transportTo);
  (0, import_react7.useEffect)(() => {
    if (nodeRef.current) {
      onReposition(nodeRef.current);
    }
  }, [onReposition, top, left]);
  (0, import_react7.useEffect)(() => {
    setVisible(!!node);
  }, [node]);
  (0, import_react7.useLayoutEffect)(() => {
    if (visible) {
      hostParent.appendChild(host);
      return () => {
        hostParent.removeChild(host);
      };
    }
  }, [host, hostParent, visible]);
  const measure = (0, import_react7.useCallback)(() => {
    const node2 = nodeRef.current;
    if (!node2 || !visible) {
      return;
    }
    const newTop = calculateTop(node2, position, host);
    const newLeft = calculateLeft(node2, position, host);
    if (newTop !== top) {
      setTop(newTop);
    }
    if (newLeft !== left) {
      setLeft(newLeft);
    }
  }, [host, left, position, top, visible]);
  useWatcher_default(measure, { updateOnAnimationFrame, enabled: visible });
  const Component = component || "div";
  return (0, import_jsx_runtime3.jsxs)(Component, { ...rest, ...style, ref: (node2) => {
    if (typeof ref === "function") {
      ref(node2);
    } else if (ref) {
      ref.current = node2;
    }
    nodeRef.current = node2;
  }, children: [children, top != null && left != null && (0, import_jsx_runtime3.jsx)(PortalContext.Provider, { value: host.parentNode || defaultRoot, children: (0, import_react_dom.createPortal)((0, import_jsx_runtime3.jsx)("div", { ref: containerRef, "data-sticknestingkey": nestingKey, ...inline_default(style("node"), {
    position: "absolute",
    top,
    left
  }), children: node }), host) })] });
});
(0, import_invariant3.default)(document.body, "Stick can only be used in a browser environment.");
var defaultRoot = document.body;
var PortalContext = (0, import_react7.createContext)(defaultRoot);
var StickPortal_default = StickPortal;
function useHost(transportTo) {
  const [host] = (0, import_react7.useState)(() => document.createElement("div"));
  const portalHost = (0, import_react7.useContext)(PortalContext);
  const hostParent = transportTo || portalHost;
  (0, import_invariant3.default)(hostParent, "Could not determine a parent for the host node.");
  return [host, hostParent];
}
function calculateTop(node, position, host) {
  const { top, height, bottom } = node.getBoundingClientRect();
  const fixedHost = getFixedParent(host);
  let result = 0;
  if (position.indexOf("top") !== -1) {
    result = top;
  }
  if (position.indexOf("middle") !== -1) {
    result = top + height / 2;
  }
  if (position.indexOf("bottom") !== -1) {
    result = bottom;
  }
  if (fixedHost) {
    const { top: hostTop } = fixedHost.getBoundingClientRect();
    return result - hostTop;
  }
  return result + scrollY();
}
function calculateLeft(node, position, host) {
  const { left, width, right } = node.getBoundingClientRect();
  const fixedHost = getFixedParent(host);
  const scrollHost = getScrollParent(node);
  let result = 0;
  if (position.indexOf("left") !== -1) {
    result = left;
  }
  if (position.indexOf("center") !== -1) {
    result = left + width / 2;
  }
  if (position.indexOf("right") !== -1) {
    result = right;
  }
  if (fixedHost) {
    const { left: hostLeft } = fixedHost.getBoundingClientRect();
    return result - hostLeft;
  }
  if (scrollHost) {
    return result + scrollX(node) - scrollHost.scrollLeft;
  }
  return result + scrollX(node);
}
function getScrollParent(element) {
  if (!element) {
    return null;
  }
  if (element.nodeName === "BODY" || element.nodeName === "HTML") {
    return null;
  }
  const style = getComputedStyle(element);
  if (style.overflowX === "auto" || style.overflowX === "scroll") {
    return element;
  }
  return element.parentNode instanceof Element ? getScrollParent(element.parentNode) : null;
}
function getFixedParent(element) {
  if (element.nodeName === "BODY" || element.nodeName === "HTML") {
    return null;
  }
  if (getComputedStyle(element).position === "fixed") {
    return element;
  }
  return element.parentNode instanceof Element ? getFixedParent(element.parentNode) : null;
}

// node_modules/react-stick/es/Stick.js
var defaultStyles = {
  node: {
    position: "absolute",
    zIndex: 99,
    textAlign: "left"
  }
};
function Stick({ inline: inline3 = false, node, sameWidth = false, children, updateOnAnimationFrame = false, position, align, component, transportTo, autoFlipHorizontally: autoFlipHorizontally2 = false, autoFlipVertically: autoFlipVertically2 = false, onClickOutside, style, className, classNames, ...rest }) {
  const [width, setWidth] = (0, import_react8.useState)(0);
  const [containerNestingKeyExtension] = (0, import_react8.useState)(() => uniqueId_default());
  const nestingKey = [(0, import_react8.useContext)(StickContext), containerNestingKeyExtension].filter((key) => !!key).join("_");
  const anchorRef = (0, import_react8.useRef)();
  const nodeRef = (0, import_react8.useRef)(null);
  const containerRef = (0, import_react8.useRef)();
  const [resolvedPosition, resolvedAlign, checkAlignment] = useAutoFlip_default(autoFlipHorizontally2, autoFlipVertically2, position || defaultPosition_default, align || getDefaultAlign_default(position || defaultPosition_default));
  const styles = es6_default(defaultStyles, { style, className, classNames }, getModifiers_default({
    position: resolvedPosition,
    align: resolvedAlign,
    sameWidth
  }));
  (0, import_react8.useEffect)(() => {
    const handleScroll = () => {
      if (!nodeRef.current || !anchorRef.current) {
        return;
      }
      checkAlignment(nodeRef.current, anchorRef.current);
    };
    handleScroll();
    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, [checkAlignment]);
  (0, import_react8.useEffect)(() => {
    const handleClickOutside = (ev) => {
      if (!onClickOutside) {
        return;
      }
      const { target } = ev;
      if (target instanceof window.HTMLElement && isOutside(anchorRef, containerRef, target)) {
        onClickOutside(ev);
      }
    };
    document.addEventListener("click", handleClickOutside, true);
    return () => {
      document.removeEventListener("click", handleClickOutside, true);
    };
  }, [onClickOutside]);
  const measure = (0, import_react8.useCallback)(() => {
    if (!anchorRef.current) {
      return;
    }
    const boundingRect = anchorRef.current.getBoundingClientRect();
    const newWidth = sameWidth ? boundingRect.width : calculateWidth(anchorRef.current, resolvedPosition, resolvedAlign, boundingRect);
    if (newWidth !== width) {
      setWidth(newWidth);
    }
  }, [resolvedAlign, resolvedPosition, sameWidth, width]);
  useWatcher_default(measure, { updateOnAnimationFrame, enabled: !!node });
  const handleReposition = (0, import_react8.useCallback)(() => {
    if (nodeRef.current && anchorRef.current) {
      checkAlignment(nodeRef.current, anchorRef.current);
    }
  }, [checkAlignment]);
  if (inline3) {
    return (0, import_jsx_runtime4.jsx)(StickContext.Provider, { value: nestingKey, children: (0, import_jsx_runtime4.jsx)(StickInline_default, { ...rest, position: resolvedPosition, align: resolvedAlign, style: styles, node: node && (0, import_jsx_runtime4.jsx)(StickNode_default, { width, position: resolvedPosition, align: resolvedAlign, sameWidth, ref: nodeRef, children: node }), nestingKey, containerRef: (node2) => {
      anchorRef.current = node2 || void 0;
      containerRef.current = node2 || void 0;
    }, component, children }) });
  }
  return (0, import_jsx_runtime4.jsx)(StickContext.Provider, { value: nestingKey, children: (0, import_jsx_runtime4.jsx)(StickPortal_default, { ...rest, updateOnAnimationFrame, transportTo, component, ref: (node2) => {
    (0, import_invariant4.default)(!node2 || node2 instanceof Element, "Only HTML elements can be stick anchors.");
    anchorRef.current = node2 || void 0;
  }, position: resolvedPosition, node: node && (0, import_jsx_runtime4.jsx)(StickNode_default, { width, position: resolvedPosition, align: resolvedAlign, sameWidth, ref: nodeRef, children: node }), style: styles, nestingKey, containerRef, onReposition: handleReposition, children }) });
}
function isOutside(anchorRef, containerRef, target) {
  if (anchorRef.current && anchorRef.current.contains(target)) {
    return false;
  }
  const nestingKey = containerRef.current && containerRef.current.getAttribute("data-sticknestingkey");
  if (nestingKey) {
    const nestedStickNodes = document.querySelectorAll(`[data-stickNestingKey^='${nestingKey}']`);
    return !nestedStickNodes || !Array.from(nestedStickNodes).some((stickNode) => stickNode.contains(target));
  }
  return true;
}
function calculateWidth(anchorRef, position, align, { left, width, right }) {
  if (!anchorRef) {
    return 0;
  }
  (0, import_invariant4.default)(document.documentElement, "Could not find document root node.");
  const scrollWidth = document.documentElement.scrollWidth;
  const [, horizontalPosition] = position.split(" ");
  (0, import_invariant4.default)(horizontalPosition === "left" || horizontalPosition === "center" || horizontalPosition === "right", `Expected horizontal position to be "left", "center", or "right" but got "${horizontalPosition}".`);
  const positionAdjustments = {
    left,
    center: left + width / 2,
    right
  };
  const absLeft = scrollX(anchorRef) + positionAdjustments[horizontalPosition];
  if (align.indexOf("left") !== -1) {
    return scrollWidth - absLeft;
  }
  if (align.indexOf("right") !== -1) {
    return absLeft;
  }
  if (align.indexOf("center") !== -1) {
    return Math.min(absLeft, scrollWidth - absLeft) * 2;
  }
  return 0;
}
var Stick_default = Stick;
export {
  PortalContext,
  Stick_default as default
};
/*! Bundled license information:

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=react-stick.js.map
